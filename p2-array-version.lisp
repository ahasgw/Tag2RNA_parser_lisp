(defclass parser () ()
  (:documentation "Bases of all parser classes"))

(defgeneric parse-string (parser string)
  (:documentation "Parse for the string"))

(defgeneric parse (parser)
  (:documentation "Returns parsing result"))

;;
(defclass tag2rna-parser (parser tag2rna-grammar)
  ((string :accessor given-string) ;;has " " of it's head.
   (result :reader parse-result))
  (:documentation "Tag2RNA parser class"))

(defun make-tag2rna-parser (initial final atrees)
  (make-instance 'tag2rna-parser
    :initial-symbols initial
    :final-symbols final
    :atrees atrees))

(defmethod parse-string ((parser tag2rna-parser) string)
  (progn
    (setf (given-string parser)
          (concatenate 'simple-string " " string))
    (parse parser)))

(defmethod parse ((parser tag2rna-parser))
  (recognize (atrees parser)
             (initial-symbols parser)
             (final-symbols parser)
             (given-string parser)))

(defun recognize (atrees initials finals string)
  (let* ((n (1- (length string)))
         (matrix-b (make-array (list (1+ n) (1+ n) (1+ n) (1+ n))))
         (t2u (collect-atrees-by-types atrees '(t2u)))
         (t2d (collect-atrees-by-types atrees '(t2d)))
         (t3l (collect-atrees-by-types atrees '(t3l)))
         (t3r (collect-atrees-by-types atrees '(t3r)))
         (t4ld (collect-atrees-by-types atrees '(t4ld)))
         (t4lu (collect-atrees-by-types atrees '(t4lu)))
         (t4rd (collect-atrees-by-types atrees '(t4rd)))
         (t4ru (collect-atrees-by-types atrees '(t4ru))))
    (let* ((atree-final (collect-atrees-whose-tagged-node-labeled-by-final-symbol atrees finals))
           (t4r (collect-atrees-by-types atree-final '(t4rd t4ru)))
           (t4l (collect-atrees-by-types atree-final '(t4ld t4lu)))
           (t3r (collect-atrees-by-types atree-final '(t3r)))
           (t3l (collect-atrees-by-types atree-final '(t3l)))
           (t2  (collect-atrees-by-types atree-final '(t2d t2u))))
      ;; initialize a recognition matrix-b
      (format t "~%t2=~A,t3l=~A" t2 t3l)
      (format t "~%Entering initialize...")
      (do ((i 0 (+ i 1)))
          ((= i n))
        (format t "~%[i=~A]" i)
        (do ((p 0 (+ p 1)))
            ((= p (1+ i)))
          (setf (aref matrix-b p p i (1+ i)) t4r)
          (format t "~%B(~A,~A,~A,~A)=~A" p p i (1+ i) (aref matrix-b p p i (1+ i)))
          )
        (do ((r (1+ i) (+ r 1)))
            ((= r (1+ n)))
          (setf (aref matrix-b i (1+ i) r r) t4l)
          (format t "~%B(~A,~A,~A,~A)=~A" i (1+ i) r r (aref matrix-b i (1+ i) r r))
          )
        )
      (do ((i 0 (+ i 1)))
          ((= i (1- n)))
        (when (pair-p (+ i 1) (+ i 2))
          (do ((p 0 (+ p 1)))
              ((= p (1+ i)))
            (setf (aref matrix-b p p i (+ i 2)) t3r)
            (format t "~%B(~A,~A,~A,~A)=~A" p p i (+ i 2) (aref matrix-b p p i (+ i 2)))
            )
          (do ((r (+ i 2) (+ r 1)))
              ((= r (1+ n)))
            (setf (aref matrix-b i (+ i 2) r r) t3l)
            (format t "~%B(~A,~A,~A,~A)=~A,~A" i (+ i 2) r r (aref matrix-b i (+ i 2) r r) t3l)
            ))
        (do ((k (+ i 1) (+ k 1)))
            ((= k n))
          (when (pair-p (+ i 1) (+ k 1))
            (setf (aref matrix-b i (+ i 1) k (+ k 1)) t2))
          (format t "~%B(~A,~A,~A,~A)=~A,~A" i (+ i 1) k (+ k 1) (aref matrix-b i (+ i 1) k (+ k 1)) t2)
          )
        )
      )
    ;; compute every steps
    (format t "~%Entering compute steps...")
    (do ((l 0 (+ l 1)))
        ((= l (1+ n)))
      (do ((i l (- i 1)))
          ((= i -1))
        (do ((j i (+ j 1)))
            ((= j (1+ l)))
          (do ((k l (- k 1)))
              ((= k (1- j)))
            (format t "~%[~A,~A,~A,~A]" i j k l)
            ;; step(1-1)
            (when (and (<= 0 i (1- j) (1+ k) l n)
                       (pair-p j (1+ k)))
              (compute-step t2u
                            (aref matrix-b i (1- j) (1+ k) l)))
            ;; step(1-2)
            (when (and (<= 0 (1+ i) j k (1- l) n)
                       (pair-p (1+ i) l))
              (compute-step t2d
                            (aref matrix-b (1+ i) j k (1- l))))
            ;; step(2-1)
            (when (and (<= 0 (1+ i) (1- j) k l n)
                       (pair-p (1+ i) j))
              (compute-step t3l
                            (aref matrix-b (1+ i) (1- j) k l)))
            ;; step(2-2)
            (when (and (<= 0 i j (1+ k) (1- l) n)
                       (pair-p (1+ k) l))
              (compute-step t3r
                            (aref matrix-b i j (1+ k) (1- l))))
            ;; step(3-1)
            (when (<= 0 (1+ i) j k l n)
              (compute-step t4ld
                            (aref matrix-b (1+ i) j k l)))
            ;; step(3-2)
            (when (<= 0 i (1- j) k l n)
              (compute-step t4lu
                            (aref matrix-b i (1- j) k l)))
            ;; step(3-3)
            (when (<= 0 i j k (1- l) n)
              (compute-step t4rd
                            (aref matrix-b i j k (1- l))))
            ;; step(3-4)
            (when (<= 0 i j (1+ k) l n)
              (compute-step t4ru
                            (aref matrix-b i j (1+ k) l)))
            )
          )
        )
      )
    ;; accept
    (format t "~%Entering accept...")
    (do ((j 0 (+ j 1)))
        ((= j (1+ n)))
      (dolist (atree (aref matrix-b 0 j j n))
        (when (member (atree-root-node atree) initials)
          (format t "~%String was recognized.")
          (return t))
        ))
    nil
    )
  )
